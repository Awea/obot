#!/usr/bin/env ruby

require 'thor'

class ObotCLI < Thor

  desc 'default_loop', 'run the default_loop'
  method_option :environment, default: 'development', aliases: '-e', desc: 'wich environment you want'
  method_option :config_file, default: 'config/config.yml', aliases: '-c', desc: 'path to the config file'
  def default_loop
    require_relative '../lib/loop'
    require_relative '../lib/browser'
    require_relative '../lib/database'
    require_relative '../lib/obot'

    # Clean data files 
    # Better file management using last update time
    Dir.foreach('data') {|f| fn = File.join('data', f); File.delete(fn) if f != '.' && f != '..'}

    obot = Obot.new(
      options[:config_file] ? options[:config_file] : 'config/config.yml',
      options[:environment]
    )
    Loop.new(obot).run_default
  end

  desc 'build_at planet_coordinates, type, at', 'Add a build order for a given planet at a given time'
  option :planet_coordinates, required: true, aliases: '-p', desc: 'coordinates for your build format : xx:xx:xx'
  method_option :type, required: true, aliases: '-t', desc: 'what do you want to build - SEE README for type list'
  method_option :at, required: true, aliases: '-a', desc: 'when do you want to build it ?'
  def build_at
    require_relative '../lib/database'

    `echo "/Users/aweaoftheworld/.in-progress/obot/bin/cli do_build '#{options[:planet_coordinates]}' '#{options[:type]}'" | at #{options[:at]}`
  end

  desc 'do_build planet_coordinates, type', 'Write the order for the next loop, used by the bot not by you fool'
  def do_build(planet_coordinates, type)
    require_relative '../lib/database'

    BuildLoop.new(planet_coordinates, type).save
  end
end

ObotCLI.start(ARGV)
